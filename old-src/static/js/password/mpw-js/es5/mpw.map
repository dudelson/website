{"version":3,"file":"/home/tom/git/mpw-js/es5/mpw.js","sources":["/home/tom/git/mpw-js/mpw.js","@traceur/generated/TemplateParser/0","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/4"],"names":[],"mappings":"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","sourceRoot":"/home/tom/git/mpw-js/es5/","sourcesContent":["/*! by Tom Thorogood <me@tomthorogood.co.uk> */\n/*! This work is licensed under the Creative Commons Attribution 4.0\nInternational License. To view a copy of this license, visit\nhttp://creativecommons.org/licenses/by/4.0/ or see LICENSE. */\n\n// A TextEncoder in UTF-8 to convert strings to `Uint8Array`s\nconst txtencoder = new TextEncoder;\n\n// JS Web Crypto implementation of http://masterpasswordapp.com/algorithm.html\nclass MPW {\n\tconstructor(name, password, version = MPW.VERSION) {\n\t\t// The algorithm version\n\t\tthis.version = version;\n\t\t\n\t\t// Store name on the object, this is not used at all internally\n\t\tthis.name = name;\n\t\t\n\t\t// Check for valid algorithm versions\n\t\tif (version >= 0 && version <= MPW.VERSION) {\n\t\t\t// Calculate the master key which will be used to calculate\n\t\t\t// the password seed\n\t\t\tthis.key = MPW.calculateKey(name, password, version);\n\t\t} else {\n\t\t\tthis.key = Promise.reject(new Error(`Algorithm version ${version} not implemented`));\n\t\t}\n\t}\n\t\n\t// calculateKey takes ~ 1450.000ms to complete\n\tstatic calculateKey(name, password, version = MPW.VERSION) {\n\t\tif (!name || !name.length) {\n\t\t\treturn Promise.reject(new Error(\"Argument name not present\"));\n\t\t}\n\t\t\n\t\tif (!password || !password.length) {\n\t\t\treturn Promise.reject(new Error(\"Argument password not present\"));\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// Cache the number of characters in name for older buggy\n\t\t\t// versions of MPW\n\t\t\tlet nameCharLength = name.length;\n\t\t\t\n\t\t\t// Convert password string to a Uint8Array w/ UTF-8\n\t\t\tpassword = txtencoder.encode(password);\n\t\t\t\n\t\t\t// Convert name string to a Uint8Array w/ UTF-8\n\t\t\tname = txtencoder.encode(name);\n\t\t\t\n\t\t\t// Convert MPW.NS string to a Uint8Array w/ UTF-8\n\t\t\tlet NS = txtencoder.encode(MPW.NS);\n\t\t\t\n\t\t\t// Create salt array and a DataView representing it\n\t\t\tvar salt = new Uint8Array(\n\t\t\t\tNS.length\n\t\t\t\t+ 4/*sizeof(uint32)*/ + name.length\n\t\t\t);\n\t\t\tlet saltView = new DataView(salt.buffer, salt.byteOffset, salt.byteLength);\n\t\t\tlet i = 0;\n\t\t\t\n\t\t\t// Set salt[0,] to NS\n\t\t\tsalt.set(NS, i); i += NS.length;\n\t\t\t\n\t\t\tif (version < 3) {\n\t\t\t\t// Set data[i,i+4] to nameCharLength UINT32 in big-endian form\n\t\t\t\tsaltView.setUint32(i, nameCharLength, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t} else {\n\t\t\t\t// Set salt[i,i+4] to name.length UINT32 in big-endian form\n\t\t\t\tsaltView.setUint32(i, name.length, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t}\n\t\t\t\n\t\t\t// Set salt[i,] to name\n\t\t\tsalt.set(name, i); i += name.length;\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t\t\n\t\t// Derive the master key w/ scrypt\n\t\t// why is buflen 64*8==512 and not 32*8==256 ?\n\t\tlet key = window.scrypt(password, salt, 32768/*= n*/, 8/*= r*/, 2/*= p*/, 64/*= buflen*/);\n\t\t\n\t\t// If the Web Crypto API is supported import the key, otherwise return\n\t\treturn window.crypto.subtle\n\t\t\t? key.then(\n\t\t\t\t// Import the key into WebCrypto to use later with sign while\n\t\t\t\t// being non-extractable\n\t\t\t\tkey => window.crypto.subtle.importKey(\"raw\", key, {\n\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t}\n\t\t\t\t}, false/*not extractable*/, [ \"sign\" ])/*= key*/\n\t\t\t)\n\t\t\t: key;\n\t}\n\t\n\t// calculateSeed takes ~ 3.000ms to complete + the time of calculateKey once\n\tcalculateSeed(site, counter = 1, context = null, NS = MPW.NS) {\n\t\tif (!site) {\n\t\t\treturn Promise.reject(new Error(\"Argument site not present\"));\n\t\t}\n\t\t\n\t\tif (counter < 1 || counter > 4294967295/*Math.pow(2, 32) - 1*/) {\n\t\t\treturn Promise.reject(new Error(\"Argument counter out of range\"));\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// Cache the number of characters in site for older buggy\n\t\t\t// versions of MPW\n\t\t\tlet siteCharLength = site.length;\n\t\t\t\n\t\t\t// Convert salt string to a Uint8Array w/ UTF-8\n\t\t\tsite = txtencoder.encode(site);\n\t\t\t\n\t\t\t// Convert NS string to a Uint8Array w/ UTF-8\n\t\t\tNS = txtencoder.encode(NS);\n\t\t\t\n\t\t\tif (context) {\n\t\t\t\t// Convert context string to a Uint8Array w/ UTF-8\n\t\t\t\tcontext = txtencoder.encode(context);\n\t\t\t}\n\t\t\t\n\t\t\t// Create data array and a DataView representing it\n\t\t\tvar data = new Uint8Array(\n\t\t\t\tNS.length\n\t\t\t\t+ 4/*sizeof(uint32)*/ + site.length\n\t\t\t\t+ 4/*sizeof(int32)*/\n\t\t\t\t+ (context\n\t\t\t\t\t? 4/*sizeof(uint32)*/ + context.length\n\t\t\t\t\t: 0)\n\t\t\t);\n\t\t\tlet dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\t\t\tlet i = 0;\n\t\t\t\n\t\t\t// Set data[0,] to NS\n\t\t\tdata.set(NS, i); i += NS.length;\n\t\t\t\n\t\t\tif (this.version < 2) {\n\t\t\t\t// Set data[i,i+4] to siteCharLength UINT32 in big-endian form\n\t\t\t\tdataView.setUint32(i, siteCharLength, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t} else {\n\t\t\t\t// Set data[i,i+4] to site.length UINT32 in big-endian form\n\t\t\t\tdataView.setUint32(i, site.length, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t}\n\t\t\t\n\t\t\t// Set data[i,] to site\n\t\t\tdata.set(site, i); i += site.length;\n\t\t\t\n\t\t\t// Set data[i,i+4] to counter INT32 in big-endian form\n\t\t\tdataView.setInt32(i, counter, false/*big-endian*/); i += 4/*sizeof(int32)*/;\n\t\t\t\n\t\t\tif (context) {\n\t\t\t\t// Set data[i,i+4] to context.length UINT32 in big-endian form\n\t\t\t\tdataView.setUint32(i, context.length, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t\t\n\t\t\t\t// Set data[i,] to context\n\t\t\t\tdata.set(context, i); i += context.length;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t\t\n\t\t// If the Web Crypto API is supported use it, otherwise rely on crypto-js\n\t\tif (window.crypto.subtle) {\n\t\t\treturn this.key.then(\n\t\t\t\t// Sign data using HMAC-SHA-256 w/ this.key\n\t\t\t\tkey => window.crypto.subtle.sign({\n\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t}\n\t\t\t\t}, key, data)/*= seed*/\n\t\t\t).then(\n\t\t\t\t// Convert the seed to Uint8Array from ArrayBuffer\n\t\t\t\tseed => new Uint8Array(seed)/*= seed*/\n\t\t\t);\n\t\t} else {\n\t\t\treturn this.key.then(function (key) {\n\t\t\t\t// Create crypto-js WordArrays from Uint8Arrays data and key\n\t\t\t\tdata = CryptoJS.lib.WordArray.create(data);\n\t\t\t\tkey  = CryptoJS.lib.WordArray.create(key);\n\t\t\t\t\n\t\t\t\t// Sign data using HMAC-SHA-256 w/ key\n\t\t\t\treturn CryptoJS.HmacSHA256(data, key)/*= seed*/;\n\t\t\t}).then(function (hash) {\n\t\t\t\t// Create seed array and a DataView representing it\n\t\t\t\tlet seed     = new Uint8Array(hash.words.length * 4/*sizeof(int32)*/);\n\t\t\t\tlet seedView = new DataView(seed.buffer, seed.byteOffset, seed.byteLength);\n\t\t\t\t\n\t\t\t\t// Loop over hash.words which are INT32\n\t\t\t\tfor (let i = 0; i < hash.words.length; i++) {\n\t\t\t\t\t// Set seed[i*4,i*4+4] to hash.words[i] INT32 in big-endian form\n\t\t\t\t\tseedView.setInt32(i * 4/*sizeof(int32)*/, hash.words[i], false/*big-endian*/);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Return the seed Uint8Array\n\t\t\t\treturn seed;\n\t\t\t});\n\t\t}\n\t}\n\t\n\t// generate takes ~ 0.200ms to complete + the time of calculateSeed\n\tgenerate(site, counter = 1, context = null, template = \"long\", NS = MPW.NS) {\n\t\t// Does the requested template exist?\n\t\tif (!(template in MPW.templates)) {\n\t\t\treturn Promise.reject(new Error(\"Argument template invalid\"));\n\t\t}\n\t\t\n\t\t// Calculate the seed\n\t\tlet seed = this.calculateSeed(site, counter, context, NS);\n\t\t\n\t\tif (this.version < 1) {\n\t\t\t// Convert seed from host byte order to network byte\n\t\t\t// to be compatible with v0 of MPW\n\t\t\t// Follows the implementation at https://github.com/...\n\t\t\t// Lyndir/MasterPassword/blob/master/MasterPassword/...\n\t\t\t// Java/masterpassword-algorithm/src/main/java/com/...\n\t\t\t// lyndir/masterpassword/MasterKeyV0.java#L105\n\t\t\tseed = seed.then(function (seedBytes) {\n\t\t\t\tvar seed = new Uint16Array(seedBytes.length);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < seed.length; i++) {\n\t\t\t\t\tseed[i] = (seedBytes[i] > 127 ? 0x00ff : 0x0000) | (seedBytes[i] << 8);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn seed;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn seed.then(function (seed) {\n\t\t\t// Find the selected template array\n\t\t\ttemplate = MPW.templates[template];\n\t\t\t\n\t\t\t// Select the specific template based on seed[0]\n\t\t\ttemplate = template[seed[0] % template.length];\n\t\t\t\n\t\t\t// Split the template string (e.g. xxx...xxx)\n\t\t\treturn template.split(\"\").map(function (c, i) {\n\t\t\t\t// Use MPW.passchars to map the template string (e.g. xxx...xxx)\n\t\t\t\t// to characters (e.g. c -> bcdfghjklmnpqrstvwxyz)\n\t\t\t\tlet chars = MPW.passchars[c];\n\t\t\t\t\n\t\t\t\t// Select the character using seed[i + 1]\n\t\t\t\treturn chars[seed[i + 1] % chars.length];\n\t\t\t}).join(\"\");\n\t\t})/*= password*/;\n\t}\n\t\n\t// generate a password with the password namespace\n\tgeneratePassword(site, counter = 1, template = \"long\") {\n\t\treturn this.generate(site, counter, null, template, MPW.PasswordNS);\n\t}\n\t\n\t// generate a username with the login namespace\n\tgenerateLogin(site, counter = 1, template = \"name\") {\n\t\treturn this.generate(site, counter, null, template, MPW.LoginNS);\n\t}\n\t\n\t// generate a security answer with the answer namespace\n\tgenerateAnswer(site, counter = 1, context = \"\", template = \"phrase\") {\n\t\treturn this.generate(site, counter, context, template, MPW.AnswerNS);\n\t}\n\t\n\tinvalidate() {\n\t\t// Replace this.key w/ a Promise.reject\n\t\t// Preventing all future access\n\t\tthis.key = Promise.reject(new Error(\"invalid state\"));\n\t}\n\t\n\tstatic test() {\n\t\t// Pretty simple test here\n\t\treturn new MPW(\"user\", \"password\").generate(\"example.com\", 1, null, \"long\", MPW.NS).then(function (password) {\n\t\t\tconsole.assert(password === \"ZedaFaxcZaso9*\", `Self-test failed; expected: ZedaFaxcZaso9*; got: ${password}`);\n\t\t\treturn password === \"ZedaFaxcZaso9*\"\n\t\t\t\t? Promise.resolve()\n\t\t\t\t: Promise.reject(new Error(`Self-test failed; expected: ZedaFaxcZaso9*; got: ${password}`));\n\t\t});\n\t}\n}\n\n// The latest version of MPW supported\nMPW.VERSION = 3;\n\n// The namespace used in calculateKey\nMPW.NS = \"com.lyndir.masterpassword\";\n\n// The namespaces used in calculateSeed\nMPW.PasswordNS = \"com.lyndir.masterpassword\";\nMPW.LoginNS    = \"com.lyndir.masterpassword.login\";\nMPW.AnswerNS   = \"com.lyndir.masterpassword.answer\";\n\n// The templates that passwords may be created from\n// The characters map to MPW.passchars\nMPW.templates = {\n\tmaximum: [\n\t\t\"anoxxxxxxxxxxxxxxxxx\",\n\t\t\"axxxxxxxxxxxxxxxxxno\"\n\t],\n\tlong: [\n\t\t\"CvcvnoCvcvCvcv\",\n\t\t\"CvcvCvcvnoCvcv\",\n\t\t\"CvcvCvcvCvcvno\",\n\t\t\"CvccnoCvcvCvcv\",\n\t\t\"CvccCvcvnoCvcv\",\n\t\t\"CvccCvcvCvcvno\",\n\t\t\"CvcvnoCvccCvcv\",\n\t\t\"CvcvCvccnoCvcv\",\n\t\t\"CvcvCvccCvcvno\",\n\t\t\"CvcvnoCvcvCvcc\",\n\t\t\"CvcvCvcvnoCvcc\",\n\t\t\"CvcvCvcvCvccno\",\n\t\t\"CvccnoCvccCvcv\",\n\t\t\"CvccCvccnoCvcv\",\n\t\t\"CvccCvccCvcvno\",\n\t\t\"CvcvnoCvccCvcc\",\n\t\t\"CvcvCvccnoCvcc\",\n\t\t\"CvcvCvccCvccno\",\n\t\t\"CvccnoCvcvCvcc\",\n\t\t\"CvccCvcvnoCvcc\",\n\t\t\"CvccCvcvCvccno\"\n\t],\n\tmedium: [\n\t\t\"CvcnoCvc\",\n\t\t\"CvcCvcno\"\n\t],\n\tbasic: [\n\t\t\"aaanaaan\",\n\t\t\"aannaaan\",\n\t\t\"aaannaaa\"\n\t],\n\tshort: [\n\t\t\"Cvcn\"\n\t],\n\tpin: [\n\t\t\"nnnn\"\n\t],\n\tname: [\n\t\t\"cvccvcvcv\"\n\t],\n\tphrase: [\n\t\t\"cvcc cvc cvccvcv cvc\",\n\t\t\"cvc cvccvcvcv cvcv\",\n\t\t\"cv cvccv cvc cvcvccv\"\n\t]\n};\n\n// The password character mapping\n// c in template becomes bcdfghjklmnpqrstvwxyz\nMPW.passchars = {\n\tV: \"AEIOU\",\n\tC: \"BCDFGHJKLMNPQRSTVWXYZ\",\n\tv: \"aeiou\",\n\tc: \"bcdfghjklmnpqrstvwxyz\",\n\tA: \"AEIOUBCDFGHJKLMNPQRSTVWXYZ\",\n\ta: \"AEIOUaeiouBCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\",\n\tn: \"0123456789\",\n\to: \"@&%?,=[]_:-+*$#!'^~;()/.\",\n\tx: \"AEIOUaeiouBCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz0123456789!@#$%^&*()\",\n\t\" \": \" \"\n};","var $__placeholder__0 = $__placeholder__1","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2)","$__placeholder__0[$traceurRuntime.toProperty($__placeholder__1)]","$traceurRuntime.toProperty($__placeholder__0) in $__placeholder__1"]}